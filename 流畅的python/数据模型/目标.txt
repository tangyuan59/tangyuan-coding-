Python数据模型：理解为什么特殊方法是对象行为一致的关键。
数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
元编程：理解特性、描述符、类装饰器和元类的工作原